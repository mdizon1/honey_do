version: '3.2'
services:
  db:
    image: postgres

  web:
    build: .
    volumes:
      - .:/myapp
      #      - /bundle
      #- type: bind
      #  source: .
      #  target: /myapp

#      - type: volume
#        source: bundle
#        target: /bundle
#        volume:
#          nocopy: true

    ports:
      - "3000:3000"
    depends_on:
      - db
#      - bundle
      - webpack-dev
    command: ./bin/rails s -p 3000 -b '0.0.0.0'
    tty: true
    stdin_open: true

  webpack-dev:
    image: honeydo_web
    build:
      context: .
    environment:
      - NODE_ENV=development
    ports:
      - "8080:8080"
    volumes:
      - .:/myapp
    #command: ./bin/webpack-dev-server --inline true --hot true --port 8080 --public localhost:8080
    #command: ./bin/webpack-dev-server --inline true --hot true --port 8080 --public 0.0.0.0:8080
    command: ./bin/webpack-dev-server --port 8080 --public 0.0.0.0:8080

# Whenever I want to use spring to run specs, I'll just do 
# docker-compose run web bash, then bin/rspec blahblah, I think that'll do it, if not, reenable this
#  spring:
#    build: .
#    volumes:
#      - .:/myapp
#    command: spring server

    # This ensures that the pid namespace is shared between the host
    # and the container. It's not necessary to be able to run spring
    # commands, but it is necessary for "spring status" and "spring stop"
    # to work properly.
    #pid: host

#  bundle:
#    image: honeydo_web
#    command: echo bundling ruby gems??
#    volumes:
#      - type: volume
#        source: bundle
#        target: /bundle

      #  cucumber:
      #    build:
      #      context: .
      #      dockerfile: Dockerfile.cucumber
      #    command: ./bin/rake cucumber
      #    depends_on:
      #      - db
      #      - bundle


#  node_modules:
#    image: honey_do_web
#    command: echo building node modules??
#    volumes:
#      - /node_modules

#volumes:
#  bundle:
