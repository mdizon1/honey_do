* Purpose of this document
  Keep track of todo items for Honey Do development
* Current
** TODO Build landing page
*** DONE Find a suitable page design
    https://colorlib.com/demo?theme=MobApp
    CLOSED: [2018-05-03 Thu 13:03]
    Just use one of those site designs for sale. Like where marty got the mockup
    for jmcimstream

    Looking at this one : https://colorlib.com/demo?theme=MobApp
*** TODO Redo site navbar
**** TODO Style according to mock
**** TODO Create parkable nav
* Backlog
** TODO Create a local only version of the app
*** TODO Refactor api caller
**** DONE Create 1 instance of api caller at start
     CLOSED: [2018-05-03 Thu 10:16]
     So we don't have to keep passing in api keys and stuff
**** DONE Ensure delete tags requires auth token on the server
     CLOSED: [2018-05-03 Thu 10:48]
     Also there's a bug where removing a tag removes them all (on client)
**** TODO Allow api caller to be stubbed out
**** TODO Replace $.ajax with http.get etc
     Not sure of the value of this. I think using the smaller library might be
     good if jquery isn't already included.
*** TODO Refactor reducer
    This might not be something I want to do. Looking into the documentation,
    trying to use combineReducers with immutableJS is not supported. Also,
    combineReducers is meant to separate slices of the state such that reducer A
    only handles state.A and reducer B only handles state.B. However, some
    actions would need to alter UI state as well for example, if making an API
    call, it'd automatically engage the spinner. According to the redux
    documentation, there is a way to do this but it's soo ugly.

    If I do decide to do this, I'll have to plan things out a lot more clearly
    before beginning.
*** TODO Initialize app with offline mode flag(s)
** TODO Create a workflow for signup -> using the app
** TODO Get cukes working
   At least some basic workflow like cucumber/selenium can run and look at the
   starting page

   Where I left off, I was attempting to get PhantomJS/poltergeist working
   within the cucumber container. I got stuck yak shaving all day so screw that.
   Even downloading phantom js was problematic. It worked fine the first 2 or 3
   times now it just get's stuck in a 302 loop and bails out during the wget of
   the zip file. WTF???
** TODO Add sign out control to app
** TODO app doesn't fit perfectly on phone
   Theres a little wiggle room as you scroll side to side.
** TODO Add accessibility attributes to icons
   Like where I'm just doing <i class='fa fa-xxx'> i need to add aria blah blah
** TODO Refactor use of dispatch in components using connect
   I refactored some components to use connect rather than subscribe but i need
   to use mapdispatchtoprops as well as mapstatetoprops, then remove calls to
   this.props.store.dispatch
** TODO Replace $.ajax with http.get and put etc
** TODO Try to improve performance of todo tab switch
   So the whole tree apparently rerenders, but this is the expected behavior.
   It's rendering an entirely different list, yet it still feels unacceptably
   slow. Problem might lie with it simply taking too long to render each
   individual todo...
** TODO Refactor those api calls in the reducer
   Since the endpoint and auth token are always the same I'm sure we can DRY
   that up. Probably want to create an api instance that stores the endpoint and
   token. Also would allow for turning the api off so the ap works fully locally
** TODO Update Drag n drop UI
   If you drag outside of legal area, it should warn user 
** TODO When user clicks on notes that are truncated, expand them
   So you dont have to use the little ... menu
** TODO Do some more with responsiveness
   On larger screens, we can fully expand notes and/or show tags
** TODO Move the spinner somewhere more obvious
   Also make it more obvious
** TODO Hide old completed todos
   Older than x days, let this be configurable from the config tab as well
** TODO Switching tabs (from todo to shopping) should trigger a sweep in/out animation
   Like the current todos slide out and the newly chosen ones slide in
** TODO Design a sandbox implementation
   That can be used when logged out, so from the home/landing page you can start
   dicking around with what the actual app looks like. I might need to do a
   bunch of refactoring including the way that data is stored in the app. Must
   decouple the API component which talks to the server with the pure javascript
   app interactivity. This way you could run a version of the app whicih doesn't
   talk to the server at all and has no persistent state (or maybe it does..)
** TODO Create a seed list of tags for production
*** Costco
*** Target
*** Safeway
*** Raleys
*** etc.
*** Kitchen
*** Cleaing
*** Chore
*** Maintenance
*** Vehicle
*** Errand
*** etc.
** TODO Remove bootstrap-loader
   Apparently bootstrap doesn't need it anymore with v4.0.0
   I can't remember where I saw this info and now I can't seem to find how to do it
   Pushing this off til later
** TODO Fix drag n drop for mobile
*** DONE When dragging, ensure consistency of the placeholder
    CLOSED: [2017-09-27 Wed 18:09]
*** TODO Drag takes 2 taps
    1 to activate the drag, 2nd to actually start dragging
    Test this on actual mobile device to see if it's just a simulator issue

    Yep, tested on mobile and there is a problem.

    Look into TodoItem which has todoSource which has the beginDrag function.
    Maybe there's something going on there when picking something up on touch.

    After putting in some debugs there is no indication that the problem is
    there. beginDrag and hover are both called when the initial touch+drag
    happens. However, after that it just stops without triggering any endDrag or
    drop. Once you again touch the placeholder, it continues triggering hovers

*** TODO Drag and drop performance is horrible, especially on mobile
    Having trouble pinning this down. Performance tool in chrome points to none
    of my code. Inserting a little timer debug statement seems to indicate there
    is a significant lag in TodoListWrap#handleTodoReorder callback, which gets
    called every time the todo item is being dragged to a new slot. However, the
    time delay happens after setState is called. Perhaps updating the state
    repeatedly is the wrong way to go about this?

    An alternative might be to create the draglayer card thingy, then attach
    that to a single todo. It would be drawn before that todo. So on update,
    rather than change state, only that particular todo and the next todo to
    acquire the placeholder would be updated.

*** TODO When you drag, don't scroll unless hitting the bottom/top of the viewport
** TODO Tags can have icons or avatars (not sure which yet, probably both)
** TODO :design: Make tags clearer/more visible
   Right now, they show above the title when you're editing a todo but it's not
   very clear what they are. Even I was confused after coming back to the app
   after a while. They should also be shown on the top level list without having
   to expand the edit modal. There probably won't be space on a phone but it
   could show conditionally if the window/device is wide enough.
** TODO Add an x button to the search/filter field to easily clear it.
   Tried doing this before but was having difficulty wrangling material ui to
   give the result I want. The spec for material ui specifies that X buttons in
   fields should live WITHIN the field. However, there is no built in mechanism
   to do so with <TextField> in the react lib. I figured I could mimic that
   behavior by adding it as a child component but that prevented me from
   clicking on the TextField at all.
** TODO Integrate service workers (initial)
*** Set up a file as the service worker entry point (not webpack entry point, at least not yet)
*** Get the service worker to register into the page
** TODO On create todo, don't sync.
   This is referring to a larger issue:

   After user submits the form, the client will create a todo as a placeholder
   (essentially) and the server will later respond with a sync action. Instead
   of sync, the client should just take the response of teh create and update
   the local todo accordingly. On the other hand, instead of doing that, we
   should have a more sophisticated syncing process where differences are
   reconciled neatly and efficiently

   The switch to service workers will likely be part of the solution to this problem
** TODO Can add/edit tags to a todo
   Tags can currently be added/edited through the title field but there should
   also be a distinct tag section for clarity
** TODO Docker image build performance
   It takes a long time to build
*** DONE Remove bundler image
    CLOSED: [2018-04-19 Thu 19:05]
** TODO When removing a todo tag, all todo tags get removed from view :bug:
   Click on (x) in tag while in edit todo modal
   the todo shown in the list will lose all tags
* Icebox
** TODO In edit todo, when deleting tags, if you hit cancel, don't commit the delete
** TODO Make search/filter field display with error style if no results found
   To give the user a hint that they have no todos because of whats been typed
   into that field, not that it's broken or something
** TODO Fix navbar style
** TODO Add icons for each tab
   Ideally it'd show text + icon for med-up and only icon for mobile
** TODO Develop keyboard shortcuts
*** TODO Determine what commands should have shortcuts
*** TODO Get some kind of keystroke catcher working
*** TODO map keystrokes to commands (actions)
** TODO when dragging an item, render seems to be triggered 4 times
** TODO Add HTTPS
** TODO Integrate service workers
*** TODO Research how to use service workers
** TODO remove uses of type check
** TODO use typescript conventions
** TODO Add foreign key constraints
** TODO Add additional validations on todocontroller for permission verification
** TODO User can have an avatar (MARTY)
** TODO Handle error on todo creation
** TODO Take picture of item to add to todo (or any uploaded image)
** TODO Household 'make head admin' command must remove other head admin
** TODO Household admin can invite other members
** TODO Create UI for choosing colors for tags (premium feature?)
** TODO Allow user to edit their profile
** TODO Completed todos hidden by default except for admins
** TODO Show user name in navbar when logged in
** TODO Switch to Thin server
** TODO Admin can assign tasks to members
* Done
** DONE Add a clear search button
   CLOSED: [2018-04-27 Fri 01:20]
** DONE Determine whether to use font awesome or material icons
   CLOSED: [2018-05-01 Tue 16:37]
   And go with one only I think i'd prefer font awesome since the icons are
   already there in the project. Don't have to rely on google fonts which is
   being annoying
** DONE Refactor Todo Item to use material ui
   CLOSED: [2018-05-01 Tue 16:06]
   Rather than using bootstrap to render a row with columns

   Nope. Upon putting in some work on this story, using material ui would become
   problematic. First, react dnd wants native DOM elements. Using material ui
   would call for ListItems to be the things connected to drag/drop. Since Lists
   are uls and ListItems are lis under the hood, this would make for a clunky
   DOM tree.

   Since our ListItems are fairly complex, this would make the styling of the
   list items complex as well, requiring much refactoring for unknown gains.

   Instead, did a bit of minor refactoring, removing the usage of List and
   ListItem, this seemed to speed up performance a good amount.
** DONE Move TodoItem.js (component) to containers folder
   CLOSED: [2018-05-01 Tue 15:09]
   It's actually a container component
** DONE Add some margin below app bar
   CLOSED: [2018-05-01 Tue 15:06]
** DONE Ditch calls to bind(this)
   CLOSED: [2018-05-01 Tue 15:03]
** DONE Change config tab into a drawer
   CLOSED: [2018-05-01 Tue 14:36]
** DONE Upgrade immutable js
   CLOSED: [2018-04-24 Tue 14:45]
** DONE Make specs pass
   CLOSED: [2018-04-24 Tue 14:17]
** DONE Fix hot-reload problem on mac os
   CLOSED: [2018-04-24 Tue 13:34]
** DONE Handle tags in forms client side as well
   CLOSED: [2018-04-24 Tue 11:52]
*** DONE ON create
    CLOSED: [2018-04-24 Tue 11:42]
*** DONE on edit/update
    CLOSED: [2018-04-24 Tue 11:52]
** DONE Tagging todo not working server side
   CLOSED: [2018-04-19 Thu 21:04]
   Expected behavior:
   some title #tag #tag #tag with space
   result:
   some title
   tags -> [tag, tag with space]
   Ensure we have tests that cover this. It's working client side so far

   Also seeing:
   Completed 422 Unprocessable entity
   ActiveRecord::RecordInvalid (Validation failed: Title has already been taken)
   for tags..
** DONE Test performance on mobile 
   CLOSED: [2018-04-19 Thu 16:50]
   Performance is decent and everything works except drag n drop
** DONE :bug: If search/filter todo, then edit todo, then dismiss modal, it stops filtering but the search field doesn't clear
   CLOSED: [2018-04-19 Thu 19:07]
   I think it has to do with the way the TodoList is rerendered when the UI
   state changes. So the UI state changes causing a rerender up in the todo
   list, but the search/filter only happens when the search field changes.
   Either make the filtering happen intrinsically based on whatever value is in
   the search field, or clear the filter field when the modal goes away or on
   any rerender up the tree
** DONE Upgrade material ui
   CLOSED: [2018-04-19 Thu 19:06]
** DONE Performance issues
   CLOSED: [2018-04-19 Thu 19:06]
*** TODO 2 taps to drag on mobile
*** DONE Slow drag performance esp on mobile
    CLOSED: [2018-04-19 Thu 19:06]
*** DONE Performance of sync operation
    CLOSED: [2018-04-19 Thu 19:06]
    The actual timing of sync isn't too important, the problem lies in that
    syncing blocks the app from doing anything else. Syncing should happen in
    the background. The app should maintain it's own state and then periodically
    sync/update it's state with that of the main server.

    My initial thought is that it basically keeps a log of all the operations
    that happen and if there is a conflict, then it'll have to be resolved by
    the person who modified it later. For example, if someone updates Todo 37
    and someone else updates it as well, upon sync, the second person's edit
    will be presented to them as a conflict resolution.

    Ultimately, a system like Git is the most solid, but way too heavyweight for
    such a simple todo app. The chances of there being a conflict are pretty
    small to begin with. The most likely scenario I can think of is let's say
    I'm going into BART and I'm doing some TODO management. I load the app, do
    some stuff at the station and then step into the train. Now I do some more
    work on hte train while I have no internet access. Once I get reception
    again, the sync operation is going to run and potentially there will be some
    conflicts. How will they get resolved?

    So, the possible solutions are as follows in order of complexity:
    + Git-like
    + Last-in rejected with conflict resolution step
    + First-in survivor
    + Last-in survivor

    No matter which one I go with, there are going to be a bunch of edge cases
    to contend with. What if userA deletes todo which is later edited by userB
    while they were offline?

    I think for the purposes of this app I should stick with the simplest
    solution which makes sense. I don't want a journaling-type system because
    that would involve making a "change" or "action" into a discrete object on
    it's own. The way I'd like to handle syncing would be to have all the app
    data loaded locally, and periodically a service worker would take what's in
    the store and present it to the server who would then incorporate the state
    of the store into the canonical state of the store (which is what's in the
    DB). The single sync operation should resolve all conflicts.

    The question then becomes: how to take state C (canonical state) and update
    it correctly when state A comes in? Then what happens to state B which is in
    flux and receives some update from the server with a new state C? I shall
    need to think on this problem some first

*** TODO TodosController#index is slow
** DONE Change the way sync works
   CLOSED: [2018-04-19 Thu 19:04]
*** DONE Change the way todos are stored
    CLOSED: [2018-04-19 Thu 19:04]
    Rather than two arrays, they shoudl be 2 objects where the keys are IDs
    And the order of the todos are dictated by the position value of each todo
** DONE Switching to shopping list doesn't work                         :bug:
   CLOSED: [2018-04-19 Thu 18:52]
** DONE Create todo should happen in client immediately
   CLOSED: [2018-04-19 Thu 18:44]
** DONE Try refactoring the way I'm handling state and dispatch
   CLOSED: [2018-04-07 Sat 13:53]
   Gonna try doing it the redux way where we use `connect` everywhere
   Just let redux/react handle the re-rendering and batching
*** DONE Upgrade babel
    CLOSED: [2018-03-28 Wed 18:02]
*** DONE Install react hot loader (latest)
    CLOSED: [2018-03-28 Wed 18:51]
*** DONE use redux connect on some component (replace use of store.subscribe())
    CLOSED: [2018-04-07 Sat 13:53]
*** DONE use redux connect on the lowest level component that should have it
    CLOSED: [2018-04-07 Sat 13:53]
    Test that it works.
*** DONE Restructure which components need to use connect
    CLOSED: [2018-04-07 Sat 13:53]
** DONE Accept todo icon broken
   CLOSED: [2018-04-10 Tue 22:57]
** DONE Drag n drop still not accurate
   CLOSED: [2018-04-19 Thu 16:19]
   Heres what I did:
   Filter todos so only 4 or so appear
   Grab the lowest one
   Drag it to the #2 spot
   It appears in the #3 spot

   There's probably some quirks with redordering while the list is being
   filtered.  I think i'll have to revisit the reordering algorithm perhaps
   instead of places jumped, I go by adjacency. That is, when you drag
   something, it looks at the nearby ones and moves to the appropriate space
   next to them, reordering the rest.

   Server side, rather than do places jumped, pass in either the top neighbor or
   bottom neighbor (if you're at the top of the list, there'll only be a bottom
   neighbor). Then make the move accordingly
** DONE If you check a todo, then drag it, it runs away
   CLOSED: [2018-04-19 Thu 16:19]
   Problem is, when you check it, on the server side, it's moving to the bottom.
   Client side leave it in place so the user knows what happened. Then after a
   drag, there's a sync and the server then updates the client with the position
   of the checked todo. Since the drag operation only gives the server the
   number of positions jumped, they're jumping from a location which is much
   different from what the client thinks it's at. This may be fixed by the
   change to drag behavior that I'm envisioning.
** DONE Big lag between check todo and todo getting checked
   CLOSED: [2018-04-19 Thu 16:19]
   First let's see if there's a big delay between the actual touch and the
   action being triggered

   No big delay between when touch activated and when event fires nor when the
   action is dispatched.

   I believe the problem has to do with the entire list being rerendered when
   something is checked
** DONE Mobile performance issues:
   CLOSED: [2018-04-19 Thu 16:19]
*** DONE Avoid toJS() in mapStateToProps
    CLOSED: [2018-04-19 Thu 16:19]
*** DONE Try having each todo item grab itself from store
    CLOSED: [2018-04-12 Thu 23:10]
    Rather than have todolist pass todos down to them, it just passes the todo
    id which then each todo item retrieves itself from storage Needs more
    restructuring, let's get rid of todos and shopping list as separate. Instead
    the current tab would set an additional filter value which grabs out only
    the relevant todos

    This wasn't the right course of action. It's possible to prevent each todo
    from rerendering without doing this. They should either use
    shouldComponentUpdate or just properly block out mapStateToProps..
**** DONE consolidate todo data state
     CLOSED: [2018-04-12 Thu 23:20]
***** DONE Server /todos should return only {todos: {}}
      CLOSED: [2018-04-12 Thu 19:07]
***** DONE Sync todos replaces datastate as before
      CLOSED: [2018-04-12 Thu 19:07]
***** DONE TodoListWrap starts by grabing all todos: [dataState, todos]
      CLOSED: [2018-04-12 Thu 21:01]
***** DONE TodoListWrap filters out todos not of the given type before render
      CLOSED: [2018-04-12 Thu 21:09]
***** DONE TodoTypeToDataStae goes away
      CLOSED: [2018-04-12 Thu 21:20]
***** DONE Try backing out the id thing.
      CLOSED: [2018-04-12 Thu 22:36]
      Where TodoList passes ids down, instead just pass the whole todo, but as
      immutables. No we can't do that, have to turn them into js objects for
      filtering
***** DONE Try using reselect within TodoListWrap mapStateToProps
      CLOSED: [2018-04-12 Thu 23:05]
      If performance is still an issue.
***** DONE Edit todo should grab the todo from id only
      CLOSED: [2018-04-12 Thu 23:20]
**** DONE make todolistwrap hold ids instead of todos, it then passes ids down to TodoItem
     CLOSED: [2018-04-12 Thu 22:09]
*** DONE Use shouldComponentUpdate where I want to restrict re-rendering
    CLOSED: [2018-04-19 Thu 16:19]
**** DONE TodoListWrap
     CLOSED: [2018-04-12 Thu 18:38]
** DONE Performance improvement attempt
   CLOSED: [2018-04-19 Thu 15:36]
*** DONE Make TodoListWrap pass down something that may be checked for equality
    CLOSED: [2018-04-13 Fri 07:25]
    Passing down an object which was instantiated with toJS() will always result
    in an inequality:
    var foo = store.getIn(...)
    foo.toJS() === foo.toJS() is false
    ensure whatever I do pass down would evaluate to true if it hasn't changed.

    Going to try mapping the todos in props (from mapStateToProps) into their
    immutables from the store. It'll incur a lot of lookups into the store but
    should ensure that each todo can be checked for equality so long as it
    doesn't change.
*** DONE Change the way drag/drop works
    CLOSED: [2018-04-19 Thu 15:36]
    Rather than keep track of some new index or position, just keep track of the
    nearest neighbor. Then in TodoListWrap (or maybe even TodoList), render the
    placeholder next to it's neighbor. This way, the indices of the list don't
    have to update, only the position of the placeholder.
**** DONE Rather than keep track of indices, keep track of drag neighbor
     CLOSED: [2018-04-13 Fri 08:49]
**** DONE Remove old todo drag data from wherever it's used
     CLOSED: [2018-04-13 Fri 10:09]
     action, ondrag(dnd code thingy), reducer, etc
**** DONE Ensure todolist is rerendered after drop
     CLOSED: [2018-04-13 Fri 10:21]
**** DONE Update server handling of drag n drop
     CLOSED: [2018-04-19 Thu 15:36]
     Should work along the same lines as the client logic
**** DONE update specs around drag n drop (if there are any)
     CLOSED: [2018-04-19 Thu 15:36]
** DONE Test performance on mobile on a remote server
   CLOSED: [2018-04-13 Fri 15:18]
   Fire up the amazon ec2 dev machine, pull the code, run and try to use the app
   from my phone
** DONE Figure out why onTodoClicked is triggering so many times
   CLOSED: [2018-04-04 Wed 10:27]
*** DONE There's also the problem of getTodosFromStore being called 4 times on startup
    CLOSED: [2018-04-04 Wed 10:27]
    2 times it's called with empty todos

    Ok, looks like it's getting called once for each tab

    I think there's a problem with the way I'm handling rendering of each of the
    tabs. Rather than have stuff in both tabs, maybe it should only render
    whichever tab is active. The other tab goes away when switched off of.

    Not sure why it's triggering twice either way. 4 times, twice for each tab.
    Seems like it fires on todo click either way.  

    Ohhhh! got it! Since it triggers on every action, onTodoClick fires one
    action completeTodoRequest then the async action for completeTodoSuccess.
** DONE Upgrade react
   CLOSED: [2018-04-04 Wed 10:28]
** DONE Upgrade react-dnd
   CLOSED: [2018-04-04 Wed 10:28]
** DONE Test performance on mobile on a remote server
   CLOSED: [2018-04-04 Wed 10:29]
   Fire up the amazon ec2 dev machine, pull the code, run and try to use the app
   from my phone
** DONE Upgrade material ui
   CLOSED: [2018-04-12 Thu 12:32]
*** DONE Remove all use of componentWillMount
    CLOSED: [2018-04-04 Wed 12:04]
*** DONE Remove all use of componentWillReceiveProps
    CLOSED: [2018-04-04 Wed 12:04]
*** DONE In HoneyDo.jsx, use mapStateToProps rather than subscribe()
    CLOSED: [2018-04-04 Wed 12:04]
*** DONE Fix search field
    CLOSED: [2018-04-07 Sat 14:32]
**** DONE Fix it's display
     CLOSED: [2018-04-07 Sat 13:55]
**** DONE Make the style work right
     CLOSED: [2018-04-07 Sat 13:55]
**** DONE Wiring up the search field to the TodoListWrap
     CLOSED: [2018-04-07 Sat 14:32]
     Where the actual todo items are rendered. Need to smartly figure out how to
     handle the search value, propogating that down to the todolistwrap, and
     avoiding rerenders where possible.
*** DONE Render the side menus
    CLOSED: [2018-04-07 Sat 17:27]
*** DONE Fix dragging
    CLOSED: [2018-04-10 Tue 18:51]
**** DONE Preview/placeholder doesn't show
     CLOSED: [2018-04-07 Sat 20:02]
**** DONE New drag/reorder logic
     CLOSED: [2018-04-10 Tue 18:49]
     Now that todolistwrap doesn't maintain it's own state anymore, we'll have
     to rely on the store I guess, but that could mean firing actions for every
     space dragged? that could get really inefficient...
*** DONE Fix new todo modal
    CLOSED: [2018-04-10 Tue 19:18]
**** DONE New Modal update after upgrade of material ui?
     CLOSED: [2018-04-10 Tue 19:18]
**** DONE Fix the form in the modal
     CLOSED: [2018-04-10 Tue 19:18]
*** DONE Fix new todo button
    CLOSED: [2018-04-10 Tue 20:06]
    Right now it's using a button with an icon inside but I think it's just
    supposed to be an icon by itself, or maybe a paper with an icon in it..?
    Also needs to get position: fixed again
*** DONE Fix edit todo
    CLOSED: [2018-04-10 Tue 20:13]
    Modal and form doesn't work
    Doesn't dismiss
*** DONE Fix Tag display
    CLOSED: [2018-04-10 Tue 22:06]
**** DONE Tags in expanded display
     CLOSED: [2018-04-10 Tue 22:06]
**** DONE Tags in Edit todo
     CLOSED: [2018-04-10 Tue 21:41]
**** DONE Tag in edit todo should have an x that allows deletion
     CLOSED: [2018-04-10 Tue 22:06]
*** DONE Tags are having spaces consumed when parsing
    CLOSED: [2018-04-10 Tue 22:29]
*** DONE Track down those warning messages
    CLOSED: [2018-04-11 Wed 15:07]
    Looks like they're built in to material ui and the reason they're raising
    errors is because of the use of withStyles and react-hot-loader
**** DONE In EditTodoWrap, stop using getDerivedStateFromProps
     CLOSED: [2018-04-11 Wed 15:07]
     Use mapDispatchToProps where appropriate and remove getDerivedStateFromProps
*** DONE Fix side menu for normal user with just expand control
    CLOSED: [2018-04-11 Wed 16:53]
    They don't get the ellipsis menu with accept, edit, delete etc, just the 
    expand button.  That component needs to be updated for material ui
*** DONE I broke edit todo
    CLOSED: [2018-04-12 Thu 11:36]
    Or maybe it wasn't ever really working?
*** DONE Change the way uistate.isEditing works
    CLOSED: [2018-04-12 Thu 12:05]
    Instead of storing the todo it shoudl just store the id and type
    Duplicating data within the store seems to get me into trouble
*** DONE When a todo is edited and saved, it moves to position 1        :bug:
    CLOSED: [2018-04-12 Thu 12:08]
*** DONE Remove/delete tag from expanded view not working
    CLOSED: [2018-04-12 Thu 12:32]
** DONE Separate syncing from client
   CLOSED: [2018-04-04 Wed 04:45]
   This is bringing me back to the syncing concept. Thinking about it freshly
   again, I think one possibility is to have the concept of "commands" or api
   calls go into a buffer which empties out on sync. So if you create 3 todo's,
   move 2 todo's, edit 1 todo, and delete a todo, then those actions get saved
   in a command buffer. When a sync is triggered, those commands get flushed to
   the server which then resolves them based on whatever state is currently
   canonical. So syncing happens asynchronously (doesn't happen on each action)
   and the state of the app is completely contained within the client. When the
   sync happens, then the app is refreshed and whatever status changes come down
   from upstream (server side) will be displayed to the user. Ultimately a
   service worker should handle the syncing but even without that I can just
   mock it by having the sync happen at some arbitrary interval

   Looks like perhaps I've been using redux wrong(?) Rather than try to cleverly
   organize things to attempt to prevent cascading rerenders, I guess you're
   just supposed to subscribe things to the store as needed and redux/react
   should just do the right thing. And if not, then use redux-batched-updates
   which should supposedly handle it.

   So step 1, stop using x.state and anything that depends on state should
   instead subscribe to the store. Otherwise, things just get rendered based on
   their props(?).  Do this, then see how the performance looks

   After working on the redux refactor a bit as described it doesn't seem like
   that is the problem. That still might be a path to fix some things but either
   way, this task I believe is more necessary. In order to make this a
   progressive web app, I'll need to handle the syncing issue and I think this
   is the way to do it.

*** DONE Pull out a single api call
    CLOSED: [2018-04-03 Tue 22:17]
*** DONE Refactor each action which makes api call
    CLOSED: [2018-04-04 Wed 04:45]
    To use the new async middleware and pattern.
** DONE Upgrade nokogiri (why am i using it anyway?)
   CLOSED: [2018-03-28 Wed 11:44]
   Seems to be a security error
   Non issue, nokogiri is a dependency of capybara which is used for test only
** DONE Create seed list of built in tags
   CLOSED: [2018-03-28 Wed 11:34]
*** DONE Build seeds file
    CLOSED: [2017-10-24 Tue 17:47]
*** DONE Compile list of tags
    CLOSED: [2018-03-28 Wed 11:34]
** DONE :bug: in dialog(modal) on mobile, opening keyboard hides most of the dialog
   CLOSED: [2017-11-02 Thu 16:01]
** DONE Can search/filter by tags
   CLOSED: [2017-10-25 Wed 16:43]
** DONE Add some random tags to dev:seed task
   CLOSED: [2017-10-25 Wed 16:19]
** DONE Document app features
   CLOSED: [2017-10-25 Wed 15:40]
   I realize I've forgotten a bunch of things around how the app works. Tagging,
   for example. I should put any new/completed features and how they work into
   the readme
** DONE Able to search todos
   CLOSED: [2017-10-24 Tue 17:21]
** DONE Render completed todos at bottom of list
   CLOSED: [2017-10-21 Sat 20:50]
   When configuration turns them on
** DONE Fix todo item (row) style
   CLOSED: [2017-09-27 Wed 16:44]
** DONE change accept todo icon
   CLOSED: [2017-09-22 Fri 22:13]
** DONE User can hide completed todos
   CLOSED: [2017-09-22 Fri 18:55]
** DONE Deploy to heroku
   CLOSED: [2017-09-22 Fri 15:02]
** DONE 1 button deploy
   CLOSED: [2017-09-22 Fri 14:52]
** DONE Get cukes working
   CLOSED: [2017-09-22 Fri 13:06]
   Need to install chromedriver and probably selenium into the image
** DONE Todo items should go to the front of the list when added
   CLOSED: [2017-09-19 Tue 18:54]
** DONE Fix seeding issue
   CLOSED: [2017-09-19 Tue 18:32]
   It relates to rails 5 upgrade, subclasses of rails models not behaving well
** DONE Fix font awesome loading
   CLOSED: [2017-09-19 Tue 16:31]
** DONE Get it working again
   CLOSED: [2017-09-19 Tue 16:31]
** DONE Migrate code from old custom webpack to webpacker structure
   CLOSED: [2017-09-07 Thu 18:55]
*** DONE Load up bootstrap
    CLOSED: [2017-08-10 Thu 20:44]
*** DONE Move stylesheets
    CLOSED: [2017-09-06 Wed 18:01]
    LEFT OFF: __webpack_require__(...) is not a function
    Some issue with loading the css on
    import "../styles/application"
*** DONE remove stylesheet link tag
    CLOSED: [2017-09-06 Wed 18:01]
*** DONE Move over modules
    CLOSED: [2017-09-06 Wed 18:01]
*** DONE unknown prop 'onTouchTap'
    CLOSED: [2017-09-07 Thu 18:53]
    I commented out initTapEventPlugin.  That was probably specific to the
    older version of react that I was using when I first built this, I think
    now, touch events are either built in or there's a newer plugin.  Need to
    investigate and fix
** DONE Use webpacker rather than current custom webpack integration
   CLOSED: [2017-08-04 Fri 14:59]
** DONE Dockerize the app
   CLOSED: [2017-08-04 Fri 14:38]
** DONE Upgrade Ruby
   CLOSED: [2017-08-02 Wed 17:50]
** DONE Upgrade Rails
   CLOSED: [2017-08-02 Wed 17:52]
** DONE Todo list can be filtered by tag
** DONE Create UI for displaying tags
** DONE Install and set up guard-spork
** DONE Add interface for tagging todo items
** DONE Todo items (and shopping items) can be tagged
** DONE Add spork
** DONE Create shopping list and add to shopping tab
** DONE Update backbone
*** BUG: creating a new todo doesn't add it to the list
** DONE Make todos orderable
** DONE REFACTOR: Use 1 collection instead of 2 in backbone for todos
** DONE Create an event system and track events on todo transitions
** DONE REFACTOR: Add state machine to todos
** DONE Backbonize todo list control
** DONE Add tooltips to todo controls
** DONE Install/setup backbone rails
** DONE Household head admin can give admin status to other members
** DONE Design 2nd pass
*** Mobile first
*** Make it responsive
*** Todo management, shopping list management
** DONE Display user email in navbar when logged in
** DONE Add shopping list tab
** DONE House admin can uncomplete a todo
** DONE Todo can be destroyed
** DONE Add indexes to households table
** DONE Add indexes to todos table
** DONE User can create a todo item for the household
** DONE User can complete a todo item
** DONE When user logs in, if they have a household, goto the show view
** DONE First wave of style
*** Add bootstrap
*** Install a bootstrap skin
*** Bootstrapize the markup
*** Make some crappy first pass on design
** DONE Create proper route around todo creation: household/todos
** DONE Make todos acceptible
*** An admin of the household must accept a todo to remove it
*** Simply completing the todo makes it display crossed out
** DONE Choose/use a bootstrap theme
** DONE User can create a household
** DONE Only a household admin may create todos
** DONE Change user to has\_one household
** DONE A user can be a household administrator
*** Gets associated when they create a household
*** Each household has a single head who has highest admin access
** DONE Create unique index on is\_head\_admin for membership
   Ensure only 1 head admin per household
** DONE Validate only 1 head admin per household
** DONE Flesh out user model more
*** Add name
** DONE User can sign in
*** install devise
*** generate devise actions
*** put login/out actions in place
** DONE Install twitter bootstrap
** DONE Create and push project repo to github
** DONE Todo item can be asked whether it's complete
** DONE Todo item can be uncompleted
** DONE Todo item can be completed
** DONE Household has many 'items'
** DONE Household has many 'members'
*** Members are users
** DONE Create household model
** DONE Attach devise to user model
** DONE Create user model
