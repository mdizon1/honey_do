* Purpose of this document
  Keep track of todo items for Honey Do
* Current
** TODO Create seed list of built in tags
*** DONE Build seeds file
    CLOSED: [2017-10-24 Tue 17:47]
*** TODO Compile list of tags
** TODO Fix drag n drop for mobile
*** DONE When dragging, ensure consistency of the placeholder
    CLOSED: [2017-09-27 Wed 18:09]
*** TODO Drag takes 2 taps
    1 to activate the drag, 2nd to actually start dragging
    Test this on actual mobile device to see if it's just a simulator issue

    Yep, tested on mobile and there is a problem.

    Look into TodoItem which has todoSource which has the beginDrag function.
    Maybe there's something going on there when picking something up on touch.

    After putting in some debugs there is no indication that the problem is
    there. beginDrag and hover are both called when the initial touch+drag
    happens. However, after that it just stops without triggering any endDrag or
    drop. Once you again touch the placeholder, it continues triggering hovers

*** TODO Drag and drop performance is horrible, especially on mobile
    Having trouble pinning this down. Performance tool in chrome points to none
    of my code. Inserting a little timer debug statement seems to indicate there
    is a significant lag in TodoListWrap#handleTodoReorder callback, which gets
    called every time the todo item is being dragged to a new slot. However, the
    time delay happens after setState is called. Perhaps updating the state
    repeatedly is the wrong way to go about this?

    An alternative might be to create the draglayer card thingy, then attach
    that to a single todo. It would be drawn before that todo. So on update,
    rather than change state, only that particular todo and the next todo to
    acquire the placeholder would be updated.

*** TODO When you drag, don't scroll unless hitting the bottom/top of the viewport
* Backlog
** TODO Upgrade nokogiri (why am i using it anyway?)
   Seems to be a security error
** TODO Integrate service workers (initial)
*** Set up a file as the service worker entry point (not webpack entry point, at least not yet)
*** Get the service worker to register into the page
** TODO Performance issues
*** TODO 2 taps to drag on mobile
*** TODO Slow drag performance esp on mobile
*** TODO Performance of sync operation
    The actual timing of sync isn't too important, the problem lies in that
    syncing blocks the app from doing anything else. Syncing should happen in
    the background. The app should maintain it's own state and then periodically
    sync/update it's state with that of the main server.

    My initial thought is that it basically keeps a log of all the operations
    that happen and if there is a conflict, then it'll have to be resolved by
    the person who modified it later. For example, if someone updates Todo 37
    and someone else updates it as well, upon sync, the second person's edit
    will be presented to them as a conflict resolution.

    Ultimately, a system like Git is the most solid, but way too heavyweight for
    such a simple todo app. The chances of there being a conflict are pretty
    small to begin with. The most likely scenario I can think of is let's say
    I'm going into BART and I'm doing some TODO management. I load the app, do
    some stuff at the station and then step into the train. Now I do some more
    work on hte train while I have no internet access. Once I get reception
    again, the sync operation is going to run and potentially there will be some
    conflicts. How will they get resolved?

    So, the possible solutions are as follows in order of complexity:
    + Git-like
    + Last-in rejected with conflict resolution step
    + First-in survivor
    + Last-in survivor

    No matter which one I go with, there are going to be a bunch of edge cases
    to contend with. What if userA deletes todo which is later edited by userB
    while they were offline?

    I think for the purposes of this app I should stick with the simplest
    solution which makes sense. I don't want a journaling-type system because
    that would involve making a "change" or "action" into a discrete object on
    it's own. The way I'd like to handle syncing would be to have all the app
    data loaded locally, and periodically a service worker would take what's in
    the store and present it to the server who would then incorporate the state
    of the store into the canonical state of the store (which is what's in the
    DB). The single sync operation should resolve all conflicts.

    The question then becomes: how to take state C (canonical state) and update
    it correctly when state A comes in? Then what happens to state B which is in
    flux and receives some update from the server with a new state C? I shall
    need to think on this problem some first

*** TODO TodosController#index is slow
** TODO Tags can have icons or avatars (not sure which yet, probably both)
** TODO Craft welcome/landing page (logged out)
** TODO Get tests working
   At least some basic workflow like cucumber/selenium can run and look at the
   starting page

   Where I left off, I was attempting to get PhantomJS/poltergeist working
   within the cucumber container. I got stuck yak shaving all day so screw that.
   Even downloading phantom js was problematic. It worked fine the first 2 or 3
   times now it just get's stuck in a 302 loop and bails out during the wget of
   the zip file. WTF???
** TODO :design: Make tags clearer/more visible
   Right now, they show above the title when you're editing a todo but it's not
   very clear what they are. Even I was confused after coming back to the app
   after a while. They should also be shown on the top level list without having
   to expand the edit modal. There probably won't be space on a phone but it
   could show conditionally if the window/device is wide enough.
** TODO :bug: If search/filter todo, then edit todo, then dismiss modal, it stops filtering but the search field doesn't clear
   I think it has to do with the way the TodoList is rerendered when the UI
   state changes. So the UI state changes causing a rerender up in the todo
   list, but the search/filter only happens when the search field changes.
   Either make the filtering happen intrinsically based on whatever value is in
   the search field, or clear the filter field when the modal goes away or on
   any rerender up the tree
** TODO Add an x button to the search/filter field to easily clear it.
   Tried doing this before but was having difficulty wrangling material ui to
   give the result I want. The spec for material ui specifies that X buttons in
   fields should live WITHIN the field. However, there is no built in mechanism
   to do so with <TextField> in the react lib. I figured I could mimic that
   behavior by adding it as a child component but that prevented me from
   clicking on the TextField at all.
** TODO Can add/edit tags to a todo
   Tags can currently be added/edited through the title field but there should
   also be a distinct tag section for clarity
* Icebox
** TODO Make search/filter field display with error style if no results found
   To give the user a hint that they have no todos because of whats been typed
   into that field, not that it's broken or something
** TODO Fix navbar style
** TODO Add icons for each tab
   Ideally it'd show text + icon for med-up and only icon for mobile
** TODO Develop keyboard shortcuts
*** TODO Determine what commands should have shortcuts
*** TODO Get some kind of keystroke catcher working
*** TODO map keystrokes to commands (actions)
** TODO when dragging an item, render seems to be triggered 4 times
** TODO Add HTTPS
** TODO Integrate service workers
*** TODO Research how to use service workers
** TODO remove uses of type check
** TODO use typescript conventions
** TODO Iron out the signup flow
** TODO Add foreign key constraints
** TODO Add additional validations on todocontroller for permission verification
** TODO User can have an avatar (MARTY)
** TODO Handle error on todo creation
** TODO Take picture of item to add to todo (or any uploaded image)
** TODO Household 'make head admin' command must remove other head admin
** TODO Household admin can invite other members
** TODO Create UI for choosing colors for tags (premium feature?)
** TODO Allow user to edit their profile
** TODO Completed todos hidden by default except for admins
** TODO Show user name in navbar when logged in
** TODO Switch to Thin server
** TODO Admin can assign tasks to members
* Done
** DONE :bug: in dialog(modal) on mobile, opening keyboard hides most of the dialog
   CLOSED: [2017-11-02 Thu 16:01]
** DONE Can search/filter by tags
   CLOSED: [2017-10-25 Wed 16:43]
** DONE Add some random tags to dev:seed task
   CLOSED: [2017-10-25 Wed 16:19]
** DONE Document app features
   CLOSED: [2017-10-25 Wed 15:40]
   I realize I've forgotten a bunch of things around how the app works. Tagging,
   for example. I should put any new/completed features and how they work into
   the readme
** DONE Able to search todos
   CLOSED: [2017-10-24 Tue 17:21]
** DONE Render completed todos at bottom of list
   CLOSED: [2017-10-21 Sat 20:50]
   When configuration turns them on
** DONE Fix todo item (row) style
   CLOSED: [2017-09-27 Wed 16:44]
** DONE change accept todo icon
   CLOSED: [2017-09-22 Fri 22:13]
** DONE User can hide completed todos
   CLOSED: [2017-09-22 Fri 18:55]
** DONE Deploy to heroku
   CLOSED: [2017-09-22 Fri 15:02]
** DONE 1 button deploy
   CLOSED: [2017-09-22 Fri 14:52]
** DONE Get cukes working
   CLOSED: [2017-09-22 Fri 13:06]
   Need to install chromedriver and probably selenium into the image
** DONE Todo items should go to the front of the list when added
   CLOSED: [2017-09-19 Tue 18:54]
** DONE Fix seeding issue
   CLOSED: [2017-09-19 Tue 18:32]
   It relates to rails 5 upgrade, subclasses of rails models not behaving well
** DONE Fix font awesome loading
   CLOSED: [2017-09-19 Tue 16:31]
** DONE Get it working again
   CLOSED: [2017-09-19 Tue 16:31]
** DONE Migrate code from old custom webpack to webpacker structure
   CLOSED: [2017-09-07 Thu 18:55]
*** DONE Load up bootstrap
    CLOSED: [2017-08-10 Thu 20:44]
*** DONE Move stylesheets
    CLOSED: [2017-09-06 Wed 18:01]
    LEFT OFF: __webpack_require__(...) is not a function
    Some issue with loading the css on
    import "../styles/application"
*** DONE remove stylesheet link tag
    CLOSED: [2017-09-06 Wed 18:01]
*** DONE Move over modules
    CLOSED: [2017-09-06 Wed 18:01]
*** DONE unknown prop 'onTouchTap'
    CLOSED: [2017-09-07 Thu 18:53]
    I commented out initTapEventPlugin.  That was probably specific to the
    older version of react that I was using when I first built this, I think
    now, touch events are either built in or there's a newer plugin.  Need to
    investigate and fix
** DONE Use webpacker rather than current custom webpack integration
   CLOSED: [2017-08-04 Fri 14:59]
** DONE Dockerize the app
   CLOSED: [2017-08-04 Fri 14:38]
** DONE Upgrade Ruby
   CLOSED: [2017-08-02 Wed 17:50]
** DONE Upgrade Rails
   CLOSED: [2017-08-02 Wed 17:52]
** DONE Todo list can be filtered by tag
** DONE Create UI for displaying tags
** DONE Install and set up guard-spork
** DONE Add interface for tagging todo items
** DONE Todo items (and shopping items) can be tagged
** DONE Add spork
** DONE Create shopping list and add to shopping tab
** DONE Update backbone
*** BUG: creating a new todo doesn't add it to the list
** DONE Make todos orderable
** DONE REFACTOR: Use 1 collection instead of 2 in backbone for todos
** DONE Create an event system and track events on todo transitions
** DONE REFACTOR: Add state machine to todos
** DONE Backbonize todo list control
** DONE Add tooltips to todo controls
** DONE Install/setup backbone rails
** DONE Household head admin can give admin status to other members
** DONE Design 2nd pass
*** Mobile first
*** Make it responsive
*** Todo management, shopping list management
** DONE Display user email in navbar when logged in
** DONE Add shopping list tab
** DONE House admin can uncomplete a todo
** DONE Todo can be destroyed
** DONE Add indexes to households table
** DONE Add indexes to todos table
** DONE User can create a todo item for the household
** DONE User can complete a todo item
** DONE When user logs in, if they have a household, goto the show view
** DONE First wave of style
*** Add bootstrap
*** Install a bootstrap skin
*** Bootstrapize the markup
*** Make some crappy first pass on design
** DONE Create proper route around todo creation: household/todos
** DONE Make todos acceptible
*** An admin of the household must accept a todo to remove it
*** Simply completing the todo makes it display crossed out
** DONE Choose/use a bootstrap theme
** DONE User can create a household
** DONE Only a household admin may create todos
** DONE Change user to has\_one household
** DONE A user can be a household administrator
*** Gets associated when they create a household
*** Each household has a single head who has highest admin access
** DONE Create unique index on is\_head\_admin for membership
   Ensure only 1 head admin per household
** DONE Validate only 1 head admin per household
** DONE Flesh out user model more
*** Add name
** DONE User can sign in
*** install devise
*** generate devise actions
*** put login/out actions in place
** DONE Install twitter bootstrap
** DONE Create and push project repo to github
** DONE Todo item can be asked whether it's complete
** DONE Todo item can be uncompleted
** DONE Todo item can be completed
** DONE Household has many 'items'
** DONE Household has many 'members'
*** Members are users
** DONE Create household model
** DONE Attach devise to user model
** DONE Create user model
